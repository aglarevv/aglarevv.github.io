<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>十三个九的 Blog</title><link>https://aglarevv.github.io/</link><description>这个人很懒，没有写简介~</description><copyright>十三个九的 Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://aglarevv.github.io/assets/icon3.svg</url><title>avatar</title><link>https://aglarevv.github.io/</link></image><lastBuildDate>Fri, 24 Jan 2025 07:58:09 +0000</lastBuildDate><managingEditor>十三个九的 Blog</managingEditor><ttl>60</ttl><webMaster>十三个九的 Blog</webMaster><item><title>Linux内核参数</title><link>https://aglarevv.github.io//post/Linux-nei-he-can-shu.html</link><description>/etc/sysctl.conf 文件中修改 。</description><guid isPermaLink="true">https://aglarevv.github.io//post/Linux-nei-he-can-shu.html</guid><pubDate>Sat, 21 Dec 2024 09:10:34 +0000</pubDate></item><item><title>memo</title><link>https://aglarevv.github.io//post/memo.html</link><description>124 222 28 230&#13;
。</description><guid isPermaLink="true">https://aglarevv.github.io//post/memo.html</guid><pubDate>Mon, 21 Oct 2024 08:43:44 +0000</pubDate></item><item><title>linux懒人命令目录</title><link>https://aglarevv.github.io//post/linux-lan-ren-ming-ling-mu-lu.html</link><description>| 命令    | 介绍                     | 页码 |&#13;
| ------- | ------------------------ | ---- |&#13;
| cat     | 查看文件内容信息         | 32   |&#13;
| uname   | 查看系统的内核版本       | 32   |&#13;
| ls      | 查看当前目录文件信息     | 33   |&#13;
| stat    | 查看文件信息             | 33   |&#13;
| which   | 查看可执行文件的位置     | 33   |&#13;
| whereis | 查看某个命令位置         | 34   |&#13;
| mkdir   | 在指定目录下创建一个目录 | 34   |&#13;
|rm |删除命令，可以删除目录和文件|	34&#13;
alias |给命令设置别名	|35&#13;
hostname-ctl| 更改主机名字	|35&#13;
dmidecode |是查看系统服务器信息|	35&#13;
dmesg |查看服务器硬件启动日志	|36&#13;
tracepath |命令用来追踪路由信息|36&#13;
ping |测试主机与主机的连通性|	36&#13;
ab |这个命令是压测	|37&#13;
curl |是 http 命令行工具	|38&#13;
wget |主要是下载文件使用	|38&#13;
ip a |查看地址信息	|39&#13;
ifconfig |查看网卡信息|	39&#13;
watch |实时查看一些相关系统数据	|40&#13;
top |系统监视工具	|40&#13;
uptime| 查看系统负载的命令	|40&#13;
free |查看系统内存	|41&#13;
vmstat |是监控工具	|41&#13;
mpstat| 是实时系统监控工具|	42&#13;
iostat |查看磁盘读写信息	|42&#13;
sar |是性能分析工具	|43&#13;
pidstat |查看某个进程磁盘读写	|43&#13;
strace |集诊断、调试、统计与一体的工具|	44&#13;
df |显示磁盘空间信息|	44&#13;
netstat| 命令用于显示各种网络相关信息	|45&#13;
mount |这个是挂载命令|	45&#13;
lsblk |用于列出块设备的信息|	46&#13;
$RANDOM |创建随机数命令|	46&#13;
history |查看历史命令	|46&#13;
tar |解压和压缩工具	|47&#13;
zip |压缩命令	|47&#13;
find |查找和搜索文件	|48&#13;
rpm |包管理工具命令|	48&#13;
grep |是一个强大的文本搜索工具|	49&#13;
ss |查看网络状态工具	|49&#13;
du| 目录的磁盘使用空间|	50&#13;
ps |查看进程主要信息|	50&#13;
lsof |列出当前系统打开哪些文件的工具|	51&#13;
sed| 替换文本信息工具	|51&#13;
awk| 是 linux 下的一个文件编辑器	|52&#13;
export |设置或显示环境变量|	53&#13;
echo |输出信息命令	|53&#13;
tcpdump |抓包工具|	54&#13;
scp|文件传输命令|	54&#13;
firewalld| 防火墙|	55&#13;
iptables |防火墙	|55&#13;
route |命令用于显示和操作 IP 路由表	|56&#13;
lsattr |命令用于显示文件属性|	56&#13;
chattr |命令防止文件被修改	|56&#13;
chmod |更改文件属性值	|57&#13;
chowm |改变用户的所属组和所属主|	58&#13;
rmdir| 删除空目录，有数据目录无法删除|	58&#13;
split |这个命令是分割文件	|58&#13;
tail |查看文件命令|59&#13;
exec |这个命令起到传参作用|59&#13;
xargs |用于将标准输入数据转换为命令行参数|60&#13;
cp |进行拷贝文件的命令|60&#13;
ln |软 / 硬链接|60&#13;
diff |用于比较文件的内容|61&#13;
date |查看时间的命令|62&#13;
wc |统计行数和字节数等信息|62&#13;
at |定时执行任务|63&#13;
crontab |定时任务命令|63&#13;
tree |查看目录树|64&#13;
useradd| 新建用户命令|64&#13;
userdel| 删除用户命令|65&#13;
passwd |修改用户密码|65&#13;
chage |设置密码过期时间|66&#13;
sort  |文本信息排序|66&#13;
swapon| 用于建立交换分区|67&#13;
dump |备份（文件类型非 xfs）|67&#13;
sync/rsync| 同步脏数据使用和远程同步|68&#13;
dd| 读写磁盘创建特定大小文件|68&#13;
ethtool |看网卡信息|69&#13;
lscpu |查看 cpu 信息|70&#13;
lsmod| 查看模块信息|71&#13;
lspci  |查看硬件信息|71&#13;
kill |结束进程|71&#13;
systemctl |管理系统服务的命令|72&#13;
shutdown/init/reboot| 关机重启|73&#13;
md5sum md5 |校验值|73&#13;
ssh-keygen |生成密钥|73&#13;
more/less |查看文件信息|74&#13;
awk| 编辑工具|74&#13;
source |初始化文件|75&#13;
vim |是一款流行的文本编辑器|75&#13;
yum |安装包|76&#13;
mkfs.* |更改文件的类型|77&#13;
compgen |补全命令列表功能|77&#13;
sudo |向普通用户授权 root 权限|78&#13;
su |切换用户|78&#13;
arp |查看 MAC 映射信息|78&#13;
touch| 创建一个文件|79&#13;
who| 查看谁在登录系统|79&#13;
last/lastb |查看详细的用户登录信息|79&#13;
ifup/ifdown |关闭和开启网卡|80&#13;
type |命令用来显示指定命令的类型|80&#13;
locate |依据名字查找文件|80&#13;
ssh |远程连接工具|81&#13;
chsh |查看和修改当前登录的 shell|81&#13;
patch| 指令让用户修改更新原始文件|82&#13;
mpstat| 是实时系统监控工具|82&#13;
unset |命令用于删除已定义的 shell 变量|83&#13;
nohup |让进程在后台运行的命令|83&#13;
ipcs |输出进程之间的通讯信息|84&#13;
fdisk |磁盘分区工具|84&#13;
bc |计算器|85&#13;
fsck |用来维护不一致的文件系统|85&#13;
rz/sz |上传下载|86&#13;
uniq| 排序工具|86&#13;
nice/renice| 设置进程优先级|86&#13;
whoami| 查看目前的用户是谁|87&#13;
sleep |睡觉命令，一般用在脚本里|87&#13;
ulimit |针对用户限制工具|87&#13;
partprobe 和 sgdisk |这个命令是刷新磁盘|88&#13;
chroot| 命令用于改变根目录|88&#13;
help |命令查看系统所有内部命令|89&#13;
compgen| 命令查看系统所有外部命令|89&#13;
pvs、vgs、lvs|查看物理卷，卷组，逻辑卷命令|90&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://aglarevv.github.io//post/linux-lan-ren-ming-ling-mu-lu.html</guid><pubDate>Sun, 20 Oct 2024 03:00:54 +0000</pubDate></item><item><title>HAproxy</title><link>https://aglarevv.github.io//post/HAproxy.html</link><description>## 配置步骤&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;配置步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、安装&#13;
&#13;
```&#13;
yum -y install epel-release&#13;
```&#13;
&#13;
```&#13;
yum -y install haproxy&#13;
```&#13;
&#13;
2、编辑配置文件&#13;
&#13;
&gt; vim /etc/haproxy/haproxy.cfg&#13;
&gt; 配置文件中分五部分内容：&#13;
&gt; &#13;
&gt; - global：  设置全局配置参数，属于进程的配置，通常是和操作系统相关。</description><guid isPermaLink="true">https://aglarevv.github.io//post/HAproxy.html</guid><pubDate>Tue, 08 Oct 2024 11:41:11 +0000</pubDate></item><item><title>Keepalived</title><link>https://aglarevv.github.io//post/Keepalived.html</link><description>## 配置步骤&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;配置步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、关闭防火墙，selinux&#13;
2、配置yum源&#13;
3、安装keepalived&#13;
&#13;
```&#13;
yum -y install keepalived&#13;
```&#13;
&#13;
4、编辑keepalived配置文件&#13;
&#13;
&gt; vi /etc/keepalived/keepalived.conf&#13;
&#13;
#### master服务器&#13;
&#13;
```&#13;
! Configuration File for keepalived&#13;
global_defs {&#13;
 router_id 1                            #设备在组中的标识，设置不一样即可&#13;
 }&#13;
&#13;
#vrrp_script chk_nginx {                        #健康检查&#13;
# script '/etc/keepalived/ck_ng.sh'     #检查脚本&#13;
# interval 2                            #检查频率.秒&#13;
# weight -5                             #priority减5&#13;
# fall 3                                        #失败三次&#13;
# }&#13;
&#13;
#高可用集群的组员设置&#13;
vrrp_instance VI_1 {               #VI_1。</description><guid isPermaLink="true">https://aglarevv.github.io//post/Keepalived.html</guid><pubDate>Tue, 08 Oct 2024 10:00:54 +0000</pubDate></item><item><title>LVS四层负载均衡</title><link>https://aglarevv.github.io//post/LVS-si-ceng-fu-zai-jun-heng.html</link><description>## NET转发模式&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;配置步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、lvs-server下载ipvsadm&#13;
&#13;
```&#13;
yum install -y ipvsadm&#13;
```&#13;
&#13;
2、启动路由转发功能&#13;
&#13;
```&#13;
echo 1 &gt; /proc/sys/net/ipv4/ip_forward&#13;
```&#13;
&#13;
3、配置对外的ip&#13;
&#13;
&gt; -A 添加一个VIP&#13;
&gt; -t TCP协议&#13;
&gt; -s   schedule调度&#13;
&gt; -rr  轮巡策略类型&#13;
&#13;
```&#13;
ipvsadm -A -t 192.168.209.143:80  -s rr&#13;
```&#13;
&#13;
4、添加真实服务器ip&#13;
&#13;
&gt; -a  添加一个真实lvs服务ip&#13;
&gt; -r  真实服务器IP 地址&#13;
&gt; -m    指定调度算法为“轮询”模式,即请求将被均匀地分发到配置的所有真实服务器上。</description><guid isPermaLink="true">https://aglarevv.github.io//post/LVS-si-ceng-fu-zai-jun-heng.html</guid><pubDate>Thu, 26 Sep 2024 13:09:00 +0000</pubDate></item><item><title>zabbix</title><link>https://aglarevv.github.io//post/zabbix.html</link><description>## 安装&#13;
&#13;
### zabbix服务器上&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;服务器上安装步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、下载&#13;
&#13;
```&#13;
rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm&#13;
```&#13;
&#13;
```&#13;
yum clean all&#13;
```&#13;
&#13;
```&#13;
yum install zabbix-server-mysql zabbix-agent&#13;
```&#13;
&#13;
2、更换SCL源&#13;
&#13;
```&#13;
yum install centos-release-scl&#13;
```&#13;
&#13;
```&#13;
cd /etc/yum.repos.d/&#13;
mv CentOS-SCLo-scl.repo CentOS-SCLo-scl.repo.bak&#13;
mv CentOS-SCLo-scl-rh.repo CentOS-SCLo-scl-rh.repo.bak&#13;
```&#13;
&#13;
3、编辑SCL&#13;
&#13;
&gt; vim CentOS-SCLo-scl-rh.repo&#13;
&#13;
```&#13;
[centos-sclo-rh]&#13;
name=CentOS-7 - SCLo rh&#13;
baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/rh/&#13;
gpgcheck=1&#13;
enabled=1&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo&#13;
```&#13;
&#13;
4、安装前台页面&#13;
&#13;
```&#13;
yum  install  zabbix-web-mysql-scl zabbix-apache-conf-scl&#13;
```&#13;
&#13;
```&#13;
yum -y install mariadb mariadb-server&#13;
```&#13;
&#13;
5、启动数据库&#13;
&#13;
```&#13;
systemctl enable mariadb&#13;
```&#13;
&#13;
```&#13;
systemctl start mariadb&#13;
```&#13;
&#13;
6、授权数据库&#13;
&#13;
```&#13;
mysql&#13;
```&#13;
&#13;
```&#13;
create database zabbix character set utf8 collate utf8_bin;&#13;
```&#13;
&#13;
```&#13;
create user zabbix@localhost identified by 'AGLAREvv.1';&#13;
```&#13;
&#13;
```&#13;
grant all privileges on zabbix.* to zabbix@localhost;&#13;
```&#13;
&#13;
```&#13;
flush privileges;&#13;
```&#13;
&#13;
```&#13;
exit&#13;
```&#13;
&#13;
7、初始化zabbix&#13;
&#13;
```&#13;
zcat /usr/share/doc/zabbix-server-mysql-5.0.43/create.sql.gz | mysql -u zabbix -p zabbix&#13;
```&#13;
&#13;
8、配置账号密码&#13;
&#13;
&gt; vim /etc/zabbix/zabbix_server.conf&#13;
&#13;
```&#13;
DBHost=localhost&#13;
DBName=zabbix&#13;
DBUser=zabbix&#13;
DBPassword=AGLAREvv.1&#13;
```&#13;
&#13;
9、启动zabbix&#13;
&#13;
```&#13;
systemctl enable zabbix-server.service&#13;
```&#13;
&#13;
```&#13;
systemctl start zabbix-server.service&#13;
```&#13;
&#13;
10、配置zabbix前端php&#13;
&#13;
&gt; vim  /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf&#13;
&gt; 只需更改时区为 Asia/Shanghai&#13;
&#13;
11、启动服务&#13;
&#13;
```&#13;
systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm&#13;
```&#13;
&#13;
```&#13;
systemctl enable zabbix-server zabbix-agent httpd rh-php72-php-fpm&#13;
```&#13;
&#13;
12、进入前台页面（本机ip:80/zabbix）按照指示操作&#13;
&#13;
&gt; ![image](https://github.com/user-attachments/assets/94e6ea10-98a9-461a-b56c-8d9721419815)&#13;
&#13;
&gt; ![image](https://github.com/user-attachments/assets/a54b8b61-3b9f-4971-b2d6-9e141c5cbccc)&#13;
&#13;
&gt; ![image](https://github.com/user-attachments/assets/7daa1f89-ba26-45fa-a515-245bd7f3a451)&#13;
&#13;
&gt; ![image](https://github.com/user-attachments/assets/dbec2026-015b-4530-99c0-35f1da04f2e0)&#13;
&#13;
&gt; ![image](https://github.com/user-attachments/assets/a6c99e84-3246-4156-bec6-533143819b3e) **至此结束**&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
### 被监控主机上&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;被监控主机上安装步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、设置主机名&#13;
&#13;
```&#13;
hostname  web1&#13;
```&#13;
&#13;
2、关闭防火墙，selinux&#13;
3、准备镜像源&#13;
&#13;
&gt; vim /etc/yum.repos.d/zabbix.repo&#13;
&#13;
```&#13;
[zabbix]&#13;
name=alibaba zabbix&#13;
baseurl=https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/&#13;
gpgcheck=0&#13;
enabled=1&#13;
&#13;
[zabbix2]&#13;
name=alibaba zabbix frontend&#13;
baseurl=https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/frontend/&#13;
gpgcheck=0&#13;
enabled=1&#13;
```&#13;
&#13;
4、安装&#13;
&#13;
```&#13;
yum -y install zabbix-agent&#13;
```&#13;
&#13;
5、修改服务器地址&#13;
&#13;
&gt; vim /etc/zabbix/zabbix_agentd.conf&#13;
&gt; 修改Server、ServerActive、Hostname值&#13;
&#13;
```&#13;
Server=192.168.209.143,192.168.100.11             被动模式 zabbix-server-ip    &#13;
ServerActive=192.168.209.143,192.168.100.11    主动模式  zabbix-server-ip    &#13;
Hostname=web1&#13;
```&#13;
&#13;
6、启动zabbix-agent&#13;
&#13;
```&#13;
systemctl start zabbix-agent&#13;
```&#13;
&#13;
```&#13;
systemctl enable zabbix-agent&#13;
```&#13;
&#13;
**至此结束**&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 中文乱码解决&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;中文乱码解决&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、复制字体文件&#13;
&#13;
- win+r 输入fonts，复制 微软雅黑 字体文件并重命名为msyh.ttf&#13;
&#13;
2、上传到服务器字体目录下&#13;
&#13;
- /usr/share/zabbix/fonts/&#13;
&#13;
3、修改文件权限&#13;
&#13;
```&#13;
chmod 777  /usr/share/zabbix/assets/fonts/msyh.ttf&#13;
```&#13;
&#13;
4、替换&#13;
&#13;
```&#13;
sed -i 's/graphfont/msyh/g' /usr/share/zabbix/include/defines.inc.php&#13;
```&#13;
&#13;
5、确认替换结果&#13;
&#13;
```&#13;
grep FONT_NAME /usr/share/zabbix/include/defines.inc.php  -n&#13;
```&#13;
&#13;
**至此结束**&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 告警模式&#13;
&#13;
#### 微信告警&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;微信告警&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、注册企业微信&#13;
2、创建自己的应用。</description><guid isPermaLink="true">https://aglarevv.github.io//post/zabbix.html</guid><pubDate>Thu, 19 Sep 2024 02:23:50 +0000</pubDate></item><item><title>Redis</title><link>https://aglarevv.github.io//post/Redis.html</link><description>## redis安装步骤&#13;
&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;安装步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、下载依赖&#13;
&#13;
```&#13;
yum install -y gcc&#13;
```&#13;
&#13;
2、下载redis-5.0.10，下载链接：[https://pan.quark.cn/s/5375bb15ccba](https://pan.quark.cn/s/5375bb15ccba)&#13;
3、解压缩&#13;
&#13;
```&#13;
tar -zxvf redis-5.0.10.tar.gz&#13;
```&#13;
&#13;
4、进入redis根目录&#13;
&#13;
```&#13;
cd redis-5.0.10&#13;
```&#13;
&#13;
5、复制配置文件&#13;
&#13;
```&#13;
mkdir -p /etc/redis/&#13;
cp redis.conf /etc/redis/&#13;
```&#13;
&#13;
6、编译安装&#13;
&#13;
```&#13;
make &amp;&amp; make install&#13;
```&#13;
&#13;
7、启动redis&#13;
&#13;
&gt; 默认监听6379端口，前台启动&#13;
&gt; 后台启动：修改配置文件里 daemonize=no 改为 daemonize=yes&#13;
&#13;
```&#13;
redis-server /etc/redis/redis.conf&#13;
```&#13;
&#13;
**至此完成&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## redis主从复制&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;主从复制&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、修改配置&#13;
&#13;
- 主机：&#13;
&#13;
1. 更改配置文件，绑定ip&#13;
&#13;
```&#13;
bind 0.0.0.0&#13;
```&#13;
&#13;
- 从机：&#13;
&#13;
1. 更改配置文件&#13;
&#13;
&gt; 在 port 6379 后添加 slaveof 主机ip  redis端口号。</description><guid isPermaLink="true">https://aglarevv.github.io//post/Redis.html</guid><pubDate>Fri, 13 Sep 2024 12:24:06 +0000</pubDate></item><item><title>nginx的安装</title><link>https://aglarevv.github.io//post/nginx-de-an-zhuang.html</link><description># 安装步骤&#13;
1、依赖下载&#13;
```&#13;
yum install -y zlib zlib-devel openssl openssl-devel pcre pcer-devel wget httpd-tools vim gcc gcc-c++&#13;
```&#13;
2、nginx下载&#13;
```&#13;
wget https://nginx.org/download/nginx-1.26.2.tar.gz&#13;
```&#13;
3、解压&#13;
```&#13;
 tar -zxvf nginx-1.26.2.tar.gz&#13;
```&#13;
4、编译安装&#13;
```&#13;
make &amp;&amp; make install&#13;
```&#13;
5、开启nginx&#13;
```&#13;
/usr/local/nginx/sbin/nginx&#13;
```&#13;
**至此完成**&#13;
。</description><guid isPermaLink="true">https://aglarevv.github.io//post/nginx-de-an-zhuang.html</guid><pubDate>Fri, 13 Sep 2024 08:28:17 +0000</pubDate></item><item><title>jenkins</title><link>https://aglarevv.github.io//post/jenkins.html</link><description>## Jenkins安装步骤&#13;
&#13;
### 依赖工具下载&#13;
&#13;
#### 安装JDK11和tomcat9&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;安装JDK11和tomcat9&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、安装JDK11，下载链接（夸克网盘）：[https://pan.quark.cn/s/695de4a60e36](https://pan.quark.cn/s/695de4a60e36)&#13;
2、安装tomcat9，下载链接（夸克网盘）：[https://pan.quark.cn/s/d85d7ad18015](https://pan.quark.cn/s/d85d7ad18015)&#13;
3、解压JDK和tomcat&#13;
&#13;
```&#13;
tar -zxvf jdk-11.0.16_linux-x64_bin.tar.gz &amp;&amp; tar -zxvf apache-tomcat-9.0.79.tar.gz&#13;
```&#13;
&#13;
4、移动并重命名&#13;
&#13;
```&#13;
mv jdk-11.0.16 /usr/local/java &amp;&amp; mv apache-tomcat-9.0.79 /usr/local/tomcat&#13;
```&#13;
&#13;
5、添加环境变量&#13;
&#13;
&gt; vim /etc/profile.d/java.sh&#13;
&#13;
```&#13;
TOMCAT_HOME=/usr/local/tomcat&#13;
JAVA_HOME=/usr/local/java&#13;
PATH=$TOMCAT_HOME/bin:$JAVA_HOME/bin:$PATH&#13;
export TOMCAT_HOME JAVA_HOME PATH&#13;
```&#13;
&#13;
6、刷新环境变量&#13;
&#13;
```&#13;
source /etc/profile.d/java.sh&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&#13;
&#13;
##### Maven-3.8.8安装&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;Maven-3.8.8安装&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、下载链接（夸克网盘）：[https://pan.quark.cn/s/1e24cebf5469](https://pan.quark.cn/s/1e24cebf5469)&#13;
或者从官网下载&#13;
&#13;
```&#13;
wget https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz&#13;
```&#13;
&#13;
2、解压安装并移动&#13;
&#13;
```&#13;
tar -zxvf apache-maven-3.8.8-src.tar.gz&#13;
mv apache-maven-3.8.8 /usr/local/maven&#13;
```&#13;
&#13;
3、配置环境变量&#13;
&#13;
&gt; vim /etc/profile.d/jenkins_tools.sh&#13;
&#13;
```&#13;
export M2_HOME=/usr/local/maven &#13;
export M2=$M2_HOME/bin &#13;
PATH=$M2:$PATH:$HOME/bin:/usr/local/git/bin &#13;
export MAVEN_HOME=/usr/local/maven &#13;
export PATH=${MAVEN_HOME}/bin:$PATH&#13;
```&#13;
&#13;
4、刷新环境变量&#13;
&#13;
```&#13;
source /etc/profile.d/jenkins_tools.sh&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
#### Git-2.9.5安装&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;Git-2.9.5安装&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
下载链接（夸克网盘）：[https://pan.quark.cn/s/ded8b6c5488f](https://pan.quark.cn/s/ded8b6c5488f) ，使用此方式下载可跳过第2步&#13;
1、安装依赖&#13;
&#13;
```&#13;
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker     fontconfig  -y&#13;
```&#13;
&#13;
2、安装git&#13;
&#13;
```&#13;
wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz&#13;
```&#13;
&#13;
3、解压并进入到解压目录&#13;
&#13;
```&#13;
tar -zxvf git-2.9.5.tar.gz  &amp;&amp; cd git-2.9.5/&#13;
```&#13;
&#13;
4、编译并安装在/usr/local/git 目录下&#13;
&#13;
```&#13;
make prefix=/usr/local/git all &amp;&amp; make prefix=/usr/local/git install&#13;
```&#13;
&#13;
5、添加环境变量&#13;
&#13;
&gt; vim /etc/bashrc&#13;
&#13;
```&#13;
PATH=$PATH:$HOME/bin:/usr/local/git/bin&#13;
```&#13;
&#13;
6、刷新环境变量&#13;
&#13;
```&#13;
source /etc/bashrc&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
## 正式开始安装jenkins-2.422&#13;
&#13;
#### 安装jenkins-2.422&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;安装jenkins-2.422&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、下载jenkins，下载链接（夸克网盘）：[https://pan.quark.cn/s/f01fe8312095](https://pan.quark.cn/s/f01fe8312095)&#13;
2、删除tomcat下webapp所有文件&#13;
&#13;
```&#13;
rm -rf /usr/local/tomcat/webapps/*&#13;
```&#13;
&#13;
3、复制jenkins.war到webapp下&#13;
&#13;
```&#13;
cp jenkins.war /usr/local/tomcat/webapps/&#13;
```&#13;
&#13;
4、启动tomcat并访问（本机ip:8080/jenkins）&#13;
&#13;
```&#13;
/usr/local/tomcat/bin/startup.sh&#13;
```&#13;
&#13;
5、等待片刻，解锁jenkins&#13;
![image](https://github.com/user-attachments/assets/2d793a12-ed80-4eda-87c1-8bb6ee501617)&#13;
6、下载插件，等待安装完成&#13;
![image](https://github.com/user-attachments/assets/82fb5514-91b7-493b-b9ab-6ce5663c7eb9)&#13;
7、创建用户&#13;
8、系统配置Manage Jenkins&#13;
&#13;
- system中找到【全局属性】勾选 Environment variables，新增环境变量 JAVA_HOME 和 MAVEN_HOME 后保存。</description><guid isPermaLink="true">https://aglarevv.github.io//post/jenkins.html</guid><pubDate>Wed, 11 Sep 2024 13:14:03 +0000</pubDate></item><item><title>GitLab</title><link>https://aglarevv.github.io//post/GitLab.html</link><description>## GitLab部署步骤：&#13;
&#13;
1、关闭防火墙&#13;
2、下载依赖&#13;
&#13;
```&#13;
yum install -y  curl policycoreutils openssh-server openssh-clients  postfix&#13;
```&#13;
&#13;
3、设置开机自启&#13;
&#13;
```&#13;
systemctl enable sshd&#13;
systemctl start sshd&#13;
systemctl enable postfix&#13;
systemctl start postfix&#13;
```&#13;
&#13;
4、下载gitlab，下载连接（夸克网盘）：[gitlab-ce-9.1.0-ce.0.el7.x86_64.rpm](https://pan.quark.cn/s/a3a0509d91db)&#13;
5、解压&#13;
&#13;
```&#13;
yum -y install gitlab-ce-9.1.0-ce.0.el7.x86_64.rpm&#13;
```&#13;
&#13;
6、重新配置&#13;
&#13;
```&#13;
gitlab-ctl reconfigure&#13;
```&#13;
&#13;
7、进入gitlab服务器地址（本机ip:80）后，设置完密码使用root登录即可完成部署&#13;
![image](https://github.com/user-attachments/assets/697e903c-5c92-4019-9000-e40d35ffa516)&#13;
&#13;
。</description><guid isPermaLink="true">https://aglarevv.github.io//post/GitLab.html</guid><pubDate>Wed, 11 Sep 2024 10:55:42 +0000</pubDate></item><item><title>rk</title><link>https://aglarevv.github.io//post/rk.html</link><description>## Flynn分类法：&#13;
根据指令流和控制流的不同组合，分为SISD、SIMD、MISD、MIMD&#13;
计算机指令由操作码和操作数（地址码）组成&#13;
指令执行过程：取值-分析-执行&#13;
## 指令系统：&#13;
**CISC：复杂指令系统。</description><guid isPermaLink="true">https://aglarevv.github.io//post/rk.html</guid><pubDate>Fri, 23 Aug 2024 12:32:38 +0000</pubDate></item><item><title>MySQL</title><link>https://aglarevv.github.io//post/MySQL.html</link><description>## 什么是数据库？&#13;
&#13;
数据库是专门用于存放计算机数据的软件仓库，这个仓库安装一定的数据结构对数据进行组织和存储&#13;
&#13;
## 数据库的分类&#13;
&#13;
### 1、关系型数据库&#13;
&#13;
遵循ACID理论&#13;
常见的有：Oracle、MySQL、MariaDB、Microsoft SQL Server&#13;
&#13;
### 2、非关系型数据库&#13;
&#13;
也称为NoSQL数据库，是作为关系型数据库的一个有效补充&#13;
常见的有：Memcached、Redis、MongoDB&#13;
&#13;
## 关系型数据库与非关系型数据库的优缺点&#13;
&#13;
| 数据库 | 优点 | 缺点 |&#13;
| --- | --- | --- |&#13;
| 关系型数据库 | 易于维护、使用方便、支持复杂sql操作 | 读写性能较差，灵活性欠缺，存在硬盘I/O瓶颈 |&#13;
| 非关系型数据库 | 存储格式灵活，速度快，成本低 | 不支持sql语句，复杂查询欠缺 |&#13;
&#13;
&gt; SQL（Structured Query Language）结构化查询语言&#13;
&#13;
## SQL分类&#13;
&#13;
DQL：数据查询语言：查询操作的SQL&#13;
DCL：数据控制语言，设定用户及权限的SQL&#13;
DDL：数据定义语言：表、序列、视图、索引的创建和销毁的SQL&#13;
DML：数据操作语言：CRUD&#13;
TCL：事务控制语言：控制事务的SQL&#13;
&#13;
## MySQL安装&#13;
&#13;
### MySQL安装步骤&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;MySQL安装步骤&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1.清理环境&#13;
&#13;
```&#13;
yum erase mariadb mariadb-server mariadb-libs mariadb-devel -y&#13;
```&#13;
2.创建用户&#13;
&#13;
```&#13;
useradd -r sql -M -s /sbin/nologin&#13;
```&#13;
3.下载源码&#13;
&#13;
```&#13;
wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26.tar.gz&#13;
```&#13;
&#13;
&gt; 二进制安装使用下面的命令（可选），如使用二进制安装，跳过第4，7步&#13;
&#13;
```&#13;
wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz&#13;
```&#13;
4.安装编译工具&#13;
&#13;
```&#13;
yum -y install ncurses ncurses-devel openssl-devel bison gcc gcc-c++ make cmake&#13;
```&#13;
5.创建MySQL目录&#13;
&#13;
```&#13;
mkdir -p /opt/vv/{data,mysql,log}&#13;
```&#13;
6.解压&#13;
&#13;
```&#13;
tar xzvf mysql-5.7.26.tar.gz -C /opt/vv/&#13;
```&#13;
&#13;
&gt; 二进制方式安装使用下面的命令解压并移动&#13;
&#13;
```&#13;
tar xzvf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz &#13;
mv mysql-5.7.26-linux-glibc2.12-x86_64/* /opt/vv/mysql&#13;
```&#13;
7.编译安装&#13;
&#13;
```&#13;
cd /opt/vv/mysql-5.7.26/&#13;
```&#13;
&#13;
```&#13;
cmake . \&#13;
-DDOWNLOAD_BOOST=1 \&#13;
-DWITH_BOOST=boost/boost_1_59_0/ \&#13;
-DCMAKE_INSTALL_PREFIX=/opt/vv/mysql \&#13;
-DSYSCONFDIR=/etc \&#13;
-DMYSQL_DATADIR=/opt/vv/data \&#13;
-DINSTALL_MANDIR=/usr/share/man \&#13;
-DMYSQL_TCP_PORT=3306 \&#13;
-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \&#13;
-DDEFAULT_CHARSET=utf8 \&#13;
-DEXTRA_CHARSETS=all \&#13;
-DDEFAULT_COLLATION=utf8_general_ci \&#13;
-DWITH_READLINE=1 \&#13;
-DWITH_SSL=system \&#13;
-DWITH_EMBEDDED_SERVER=1 \&#13;
-DENABLED_LOCAL_INFILE=1 \&#13;
-DWITH_INNOBASE_STORAGE_ENGINE=1&#13;
```&#13;
&#13;
&gt; 参数解释：&#13;
&gt; -DCMAKE_INSTALL_PREFIX=/opt/liuyh/mysql \   安装目录&#13;
&gt; -DSYSCONFDIR=/etc \   配置文件存放 （默认可以不安装配置文件）&#13;
&gt; -DMYSQL_DATADIR=/opt/liuyh/data \   数据目录   错误日志文件也会在这个目录&#13;
&gt; -DINSTALL_MANDIR=/usr/share/man \     帮助文档&#13;
&gt; -DMYSQL_TCP_PORT=3306 \     默认端口&#13;
&gt; -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \  sock文件位置，用来做网络通信的，客户端连接服务器的时候用&#13;
&gt; -DDEFAULT_CHARSET=utf8 \    默认字符集。</description><guid isPermaLink="true">https://aglarevv.github.io//post/MySQL.html</guid><pubDate>Wed, 21 Aug 2024 10:23:03 +0000</pubDate></item><item><title>shell</title><link>https://aglarevv.github.io//post/shell.html</link><description>修改使用的shell解释器：&#13;
```&#13;
vi /etc/passwd&#13;
```&#13;
全局变量（环境变量）生效优先级：&#13;
&gt; 优先级依次递增&#13;
1. /etc/profile&#13;
2. /etc/profile.d&#13;
3. $HOME/.bash_profile&#13;
4. $HOME/.bashrc&#13;
5. /etc/bashrc&#13;
。</description><guid isPermaLink="true">https://aglarevv.github.io//post/shell.html</guid><pubDate>Wed, 21 Aug 2024 00:59:57 +0000</pubDate></item><item><title>nginx</title><link>https://aglarevv.github.io//post/nginx.html</link><description>## 安装步骤&#13;
&#13;
参考我的另一篇文章[nginx的安装](https://aglarevv.github.io//post/nginx-de-an-zhuang.html)&#13;
## 多虚拟主机配置&#13;
&#13;
```&#13;
&gt; 多端口&#13;
1. 不同server监听不同端口&#13;
&gt; 多ip&#13;
1.添加虚拟ip： ifconfig 虚拟网卡名称 ip&#13;
2.不同server监听不同ip:port&#13;
3.关闭nginx并重新启动&#13;
```&#13;
&#13;
## location匹配机制&#13;
&#13;
&gt; **匹配优先级按序递减**&#13;
&#13;
```&#13;
1. = 精确匹配&#13;
2. ^~ 以某开头，不支持正则&#13;
3. ~* 支持正则&#13;
4. 空 路径匹配&#13;
5. / 通配&#13;
```&#13;
&#13;
## 状态页配置&#13;
&#13;
&gt; 在location中添加：&#13;
&#13;
```&#13;
stub_status on; #开启状态页&#13;
access_log off; #关闭日志&#13;
```&#13;
&#13;
## 目录浏览&#13;
&#13;
&gt; 在location中添加：&#13;
&#13;
- 并且不允许有默认访问路径index&#13;
- 二者不能同时存在&#13;
&#13;
```&#13;
autoindex on;&#13;
```&#13;
&#13;
## 静态资源压缩&#13;
&#13;
&gt; 在nginx配置文件中http中添加：&#13;
&#13;
```&#13;
gzip on;&#13;
gzip_http_version 1.1;&#13;
gzip_comp_level 4;&#13;
gzip_types text/plain application/javascript application/x-javascript&#13;
text/css application/xml text/javascript application/x-httpd-php image/jpeg&#13;
image/gif image/png;&#13;
```&#13;
&#13;
## url重写&#13;
&#13;
```&#13;
在location中添加：rewrite ^/(.*) 要转发的url/$1 flag标记&#13;
flag：&#13;
1. last 匹配最后一个符合的&#13;
2. break 匹配第一个符合的&#13;
3. redirect 临时重定向，爬虫不更新&#13;
4. permanent 永久重定向，爬虫更新&#13;
```&#13;
&#13;
## 访问认证&#13;
&#13;
&gt; 需下载httpd-tools工具包&#13;
&#13;
```&#13;
执行命令： htpasswd -bc 存放文件位置 用户名 密码&#13;
配置文件location中添加：&#13;
auth_basic 'sample auth';&#13;
auth_basic_user_file 上面生成的文件位置；&#13;
```&#13;
&#13;
## 反向代理集群配置&#13;
&#13;
&gt; weight:	内容为数字，权重比，数字越大，所获得的请求越多&#13;
&gt; max_fails: 内容为数字，nginx尝试连接该节点的失败次数&#13;
&gt; fail_timeout: 内容为数字单位秒，与失败次数联合使用，到达上述失败次数后间隔多长再次请求&#13;
&gt; backup: 备份机，当其他非备份机无法使用时请求分到备份机，在使用ip_hash时无效&#13;
&#13;
```&#13;
upstream  my_cluster{&#13;
    server 192.168.209.138 weight=1 max_fails=1 fail_timeout=10s backup;&#13;
}&#13;
&#13;
localtion /{&#13;
    proxy_pass http://my_cluter;&#13;
}&#13;
```&#13;
&#13;
## 负载均衡策略&#13;
&#13;
```&#13;
轮询：默认&#13;
权重：使用较多&#13;
ip_hash：临时存储，使用redis代替&#13;
fair：智能加载&#13;
least_conn：最闲连接&#13;
url_hash：固定业务，用于分布式微服务&#13;
```&#13;
。</description><guid isPermaLink="true">https://aglarevv.github.io//post/nginx.html</guid><pubDate>Mon, 19 Aug 2024 02:46:17 +0000</pubDate></item><item><title>大杂烩</title><link>https://aglarevv.github.io//post/da-za-hui.html</link><description>## top命令：动态监控系统资源&#13;
&#13;
```&#13;
top -d 1：每秒刷新&#13;
P：按cpu使用率排序&#13;
M：按内存使用率排序&#13;
```&#13;
&#13;
## 校对时间&#13;
&#13;
&gt; 使用ntp工具进行校对&#13;
&#13;
```&#13;
yum install ntp -y&#13;
ntpdate cn.pool.ntp.org&#13;
```&#13;
&#13;
## 循环调度任务&#13;
&#13;
&gt; cronie工具包里的组件&#13;
&#13;
```&#13;
yum install cronie -y&#13;
crontab -e 进入编辑界面&#13;
```&#13;
&#13;
## tail命令：查看文件尾部&#13;
&#13;
```&#13;
tail -f 动态查看&#13;
```&#13;
&#13;
## 日志轮转&#13;
&#13;
```&#13;
默认日志生成在/var/log/下&#13;
messages：linux系统本身运行时的日志&#13;
secure：认证，安全的日志&#13;
postfix：邮件相关的日志&#13;
cron：crond，at进行相关的日志&#13;
dmsg：系统启动相关的日志&#13;
yum.log：yum相关的日志&#13;
&#13;
默认配置文件：/etc/logrotate.conf&#13;
配置文件存放路径：/etc/logrotate.d/&#13;
使用时在配置文件中引入自定义配置文件&#13;
```&#13;
&#13;
## sed命令：字符流编辑器&#13;
&#13;
&gt; 操作、过滤、转换文本内容的工具，配合正则对文件实现快速增删查改&#13;
&#13;
```&#13;
sed -n 'p' file ：打印文件所有行&#13;
sed -i 's/**/**/g' file ：修改文件&#13;
```&#13;
&#13;
## awk命令：文本格式化，转换为标准的excel表样式&#13;
&#13;
## HP服务器硬盘位置&#13;
&#13;
```&#13;
/dev/cciss/c0d0p1：c0是第一个控制器，d0是第一块磁盘，p1是分区1&#13;
```&#13;
&#13;
## 磁盘相关&#13;
&#13;
```&#13;
查看磁盘分区：lsblk&#13;
查看当前使用磁盘文件：df -TH&#13;
磁盘自动开机挂载：/etc/rc.d/rc.local文件里添加挂载命令。</description><guid isPermaLink="true">https://aglarevv.github.io//post/da-za-hui.html</guid><pubDate>Sat, 17 Aug 2024 02:58:01 +0000</pubDate></item><item><title>EMC-梳理复习</title><link>https://aglarevv.github.io//post/EMC--shu-li-fu-xi.html</link><description>电磁兼容性定义：&#13;
 ```&#13;
电子设备或系统在预定的电磁环境中能够可靠的工作，并且电子设备或系统之间不会产生不良的影响&#13;
```&#13;
电磁发射方式有两大类：&#13;
```&#13;
通过电源线发射，叫传导发射&#13;
通过辐射电磁波，叫辐射发射&#13;
电源线传导发射也会产生伴随辐射发射，产生辐射性的电磁骚扰&#13;
```&#13;
电磁兼容三要素：&#13;
```&#13;
骚扰源，敏感源，耦合路径&#13;
```&#13;
四种耦合路径：&#13;
```&#13;
电源线耦合，地线耦合，近场耦合，天线耦合&#13;
```&#13;
**如何理解地线耦合:**&#13;
```&#13;
第一，地线是电源或信号电流的返回路径，所以地线电流导致地线上有电压。</description><guid isPermaLink="true">https://aglarevv.github.io//post/EMC--shu-li-fu-xi.html</guid><pubDate>Fri, 26 Jul 2024 14:14:14 +0000</pubDate></item><item><title>EMC-测试分类</title><link>https://aglarevv.github.io//post/EMC--ce-shi-fen-lei.html</link><description>1.EMI（Electro-Magnetic Interference）---电磁骚扰测试&#13;
&#13;
- Radiated Emission －空间辐射测试&#13;
- Conducted Emission－电源传导测试&#13;
- Harmonic－谐波电流骚扰测试&#13;
- Flicker－电压变化与闪烁测试&#13;
&#13;
2. EMS（Electro-Magnetic Susceptibility）---电磁抗扰度测试&#13;
&#13;
- ESD－静电抗扰度测试&#13;
- RS－射频电磁场辐射抗扰度测试&#13;
- CS－射频场感应的传导骚扰抗扰度测试&#13;
- DIP－电压暂降，短时中断和电压变化抗扰度测试&#13;
- SURGE－浪涌（冲击）抗扰度测试&#13;
- EFT－电快速瞬变脉冲群抗扰度测试&#13;
- FMF－工频磁场抗扰度测试&#13;
&#13;
[EMC测试项目详述下载](https://github.com/user-attachments/files/16105308/EMC.pdf)&#13;
[EMC测试指标及测试方法介绍下载](https://github.com/user-attachments/files/16105309/EMC.pdf)。</description><guid isPermaLink="true">https://aglarevv.github.io//post/EMC--ce-shi-fen-lei.html</guid><pubDate>Fri, 05 Jul 2024 05:31:53 +0000</pubDate></item><item><title>EMC-基础理论</title><link>https://aglarevv.github.io//post/EMC--ji-chu-li-lun.html</link><description>电磁干扰的三要素&#13;
`骚扰源，耦合途径，敏感设备`&#13;
电磁兼容控制技术&#13;
`最常用，最基本的：屏蔽、滤波、接地`&#13;
电磁骚扰的传播途径分为两大类&#13;
`通过导体传播的电磁骚扰-传导骚扰；通过空间传播的电磁骚扰-辐射骚扰`&#13;
共阻抗耦合&#13;
`由两个回路经公共阻抗耦合而产生，干扰量是电流 i，或变化的电流 di/dt`&#13;
容性耦合&#13;
`在干扰源与干扰对象之间存在着分布电容而产生，干扰量是变化的电场，即变化的电压 du/dt`&#13;
&gt; [!TIP]&#13;
&gt; **分布电容**：导体之间的电容是由于导体表面之间的电场产生的。</description><guid isPermaLink="true">https://aglarevv.github.io//post/EMC--ji-chu-li-lun.html</guid><pubDate>Fri, 05 Jul 2024 03:28:46 +0000</pubDate></item><item><title>EMC-术语</title><link>https://aglarevv.github.io//post/EMC--shu-yu.html</link><description>## 基本概念 &#13;
电磁环境 electromagnetic environment&#13;
``给定场所的所有电磁现象的总和``&#13;
电磁兼容性 electromagnetic compatibility（EMC） &#13;
``设备或系统在其电磁环境中能正常工作且不对该环境中任何事物构成不能承受的电磁骚扰的能力``&#13;
 电磁骚扰 electromagnetic disturbance&#13;
``任何可能引起装置、设备或系统性能降低或对有生命或无生命物质产生损害作用的电磁现象``&#13;
电磁干扰 electromagnetic interference（EMI）&#13;
``电磁骚扰引起的设备、传输通道或系统性能的下降``&#13;
``电磁干扰是电磁骚扰引起的后果``&#13;
辐射发射 Radiated Emission (RE)&#13;
``通过空间传播的、有用的或不希望有的电磁能量``&#13;
传导发射 Conducted Emission (CE)&#13;
电磁噪声 electromagnetic noise&#13;
``一种明显不传送信息的时变电磁现象，它可能与有用信号叠加或组合``&#13;
无用信号 unwanted signal，undesired signal&#13;
``可能损害有用信号接收的信号``&#13;
干扰信号 interfering signal&#13;
``损害有用信号接收的信号``&#13;
抗扰度&#13;
``装置、设备或系统面临电磁骚扰不降低运行性能的能力``&#13;
电磁敏感度 Electromagnetic Susceptibility (EMS) **（敏感度高，抗扰度就低）**&#13;
``在电磁骚扰作用下，装置、设备或系统不能避免性能降低的能力``&#13;
``由于电磁能量造成性能下降的容易程度``&#13;
辐射敏感度 Radiated Susceptibility (RS)&#13;
``对造成设备性能降级的辐射骚扰场的度量``&#13;
传导敏感度 Conducted Susceptibility (CS)&#13;
``当引起设备性能降级时，对从传导方式引入的骚扰信号电流或电压的度量``&#13;
电磁兼容电平&#13;
``规定加在工作于指定条件下的装置、设备或系统上的最大电磁骚扰电平。</description><guid isPermaLink="true">https://aglarevv.github.io//post/EMC--shu-yu.html</guid><pubDate>Wed, 03 Jul 2024 04:53:11 +0000</pubDate></item><item><title>Kubernetes-k8s</title><link>https://aglarevv.github.io//post/Kubernetes-k8s.html</link><description>## 部署&#13;
&#13;
### 二进制部署Kubernetes&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;二进制部署Kubernetes&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
准备环境&#13;
&#13;
```&#13;
1、关闭防⽕墙和selinux&#13;
2、关闭交换空间：&#13;
临时关闭：swapoff -a&#13;
永久关闭：&#13;
vi /etc/fstab&#13;
找到如下内容：注释或删除&#13;
#/dev/sdX none swap sw 0 0&#13;
3、做域名解析&#13;
vi etc/hosts&#13;
192.168.209.143 k8s-master&#13;
192.168.209.11 k8s-node1&#13;
192.168.209.12 k8s-node2&#13;
```&#13;
&#13;
#### k8s-master&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;k8s-master&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、下载cfssl工具&#13;
&#13;
```&#13;
wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64&#13;
wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64&#13;
wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64&#13;
```&#13;
&#13;
1-1、授予权限&#13;
&#13;
```&#13;
chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64&#13;
```&#13;
&#13;
1-2、移动目录&#13;
&#13;
```&#13;
mv cfssl_linux-amd64 /usr/local/bin/cfssl&#13;
mv cfssljson_linux-amd64 /usr/local/bin/cfssljson&#13;
mv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo&#13;
```&#13;
&#13;
1-3、生成etcd证书&#13;
&#13;
```&#13;
mkdir cert&#13;
cd cert/&#13;
```&#13;
&#13;
&gt; vim ca-config.json&#13;
&#13;
```&#13;
{&#13;
 'signing': {&#13;
   'default': {&#13;
     'expiry': '87600h'&#13;
   },&#13;
   'profiles': {&#13;
     'www': {&#13;
       'expiry': '87600h',&#13;
       'usages': [&#13;
         'signing',&#13;
         'key encipherment',&#13;
         'server auth',&#13;
         'client auth'&#13;
       ]&#13;
     }&#13;
   }&#13;
 }&#13;
}&#13;
```&#13;
&#13;
&gt; vim ca-csr.json&#13;
&#13;
```&#13;
{&#13;
    'CN': 'etcd CA',&#13;
    'key': {&#13;
        'algo': 'rsa',&#13;
        'size': 2048&#13;
    },&#13;
    'names': [&#13;
        {&#13;
            'C': 'CN',&#13;
            'L': 'Beijing',&#13;
            'ST': 'Beijing'&#13;
        }&#13;
    ]&#13;
}&#13;
```&#13;
&#13;
&gt; vim server-csr.json&#13;
&#13;
```&#13;
{&#13;
    'CN': 'etcd',&#13;
    'hosts': [&#13;
        '192.168.209.143',&#13;
        '192.168.209.11',&#13;
        '192.168.209.12'&#13;
    ],&#13;
    'key': {&#13;
        'algo': 'rsa',&#13;
        'size': 2048&#13;
    },&#13;
    'names': [&#13;
        {&#13;
            'C': 'CN',&#13;
            'L': 'BeiJing',&#13;
            'ST': 'BeiJing'&#13;
        }&#13;
    ]&#13;
}&#13;
```&#13;
&#13;
1-4、生成ca证书&#13;
&#13;
```&#13;
cfssl gencert -initca ca-csr.json | cfssljson -bare ca -&#13;
```&#13;
&#13;
```&#13;
cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server&#13;
```&#13;
&#13;
```&#13;
效果示例：&#13;
[root@k8s-master cert] ls *pem&#13;
ca-key.pem ca.pem server-key.pem server.pem&#13;
&#13;
server.pem 要用的证书&#13;
server-key.pem 要用的私钥&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
#### k8s-master &amp; k8s-node&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;k8s-master &amp; k8s-node&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、安装Etcd&#13;
&#13;
```&#13;
wget https://github.com/etcd-io/etcd/releases/download/v3.2.12/etcd-v3.2.12-linux-amd64.tar.gz&#13;
```&#13;
&#13;
```&#13;
mkdir /opt/etcd/{bin,cfg,ssl} -p &#13;
tar zxvf etcd-v3.2.12-linux-amd64.tar.gz&#13;
mv etcd-v3.2.12-linux-amd64/{etcd,etcdctl} /opt/etcd/bin/&#13;
```&#13;
&#13;
1-1、编写配置文件&#13;
&#13;
&gt; vim /opt/etcd/cfg/etcd&#13;
&#13;
```&#13;
#[Member]&#13;
ETCD_NAME='etcd01'&#13;
ETCD_DATA_DIR='/var/lib/etcd/default.etcd'&#13;
ETCD_LISTEN_PEER_URLS='https://192.168.209.143:2380'&#13;
ETCD_LISTEN_CLIENT_URLS='https://192.168.209.143:2379'&#13;
#[Clustering]&#13;
ETCD_INITIAL_ADVERTISE_PEER_URLS='https://192.168.209.143:2380'&#13;
ETCD_ADVERTISE_CLIENT_URLS='https://192.168.209.143:2379'&#13;
ETCD_INITIAL_CLUSTER='etcd01=https://192.168.209.143:2380,etcd02=https://192.168.209.11:2380,etcd03=https://192.168.209.12:2380'&#13;
ETCD_INITIAL_CLUSTER_TOKEN='etcd-cluster'&#13;
ETCD_INITIAL_CLUSTER_STATE='new'&#13;
```&#13;
&#13;
**解释：**&#13;
&#13;
```&#13;
#[Member]&#13;
ETCD_NAME='etcd01' #节点名称，各个节点不能相同&#13;
ETCD_DATA_DIR='/var/lib/etcd/default.etcd'&#13;
ETCD_LISTEN_PEER_URLS='https://192.168.209.143:2380' #写每个节点自己的ip&#13;
ETCD_LISTEN_CLIENT_URLS='https://192.168.209.143:2379' #写每个节点自己的ip&#13;
#[Clustering]&#13;
ETCD_INITIAL_ADVERTISE_PEER_URLS='https://192.168.209.143:2380' #写每个节点的ip&#13;
ETCD_ADVERTISE_CLIENT_URLS='https://192.168.209.143:2379' #写每个节点的ip&#13;
ETCD_INITIAL_CLUSTER='etcd01=https://192.168.209.143:2380,etcd02=https://192.168.209.11:2380,etcd03=https://192.168.209.12:2380'&#13;
ETCD_INITIAL_CLUSTER_TOKEN='etcd-cluster'&#13;
ETCD_INITIAL_CLUSTER_STATE='new'&#13;
&#13;
* ETCD_NAME 节点名称,每个节点名称不⼀样&#13;
* ETCD_DATA_DIR 存储数据⽬录(他是⼀个数据库，不是存在内存的，存在硬盘中的，所有和k8s&#13;
有关的信息都会存到etcd⾥面的)&#13;
* ETCD_LISTEN_PEER_URLS 集群通信监听地址&#13;
* ETCD_LISTEN_CLIENT_URLS 客户端访问监听地址&#13;
* ETCD_INITIAL_ADVERTISE_PEER_URLS 集群通告地址&#13;
* ETCD_ADVERTISE_CLIENT_URLS 客户端通告地址&#13;
* ETCD_INITIAL_CLUSTER 集群节点地址&#13;
* ETCD_INITIAL_CLUSTER_TOKEN 集群Token&#13;
* ETCD_INITIAL_CLUSTER_STATE 加⼊集群的当前状态，new是新集群，existing表示加⼊已有集群&#13;
```&#13;
&#13;
1-2、配置systemctl管理Etcd&#13;
&#13;
&gt; vim /usr/lib/systemd/system/etcd.service&#13;
&#13;
```&#13;
[Unit]&#13;
Description=Etcd Server&#13;
After=network.target&#13;
After=network-online.target&#13;
Wants=network-online.target&#13;
[Service]&#13;
Type=notify&#13;
EnvironmentFile=/opt/etcd/cfg/etcd&#13;
ExecStart=/opt/etcd/bin/etcd \&#13;
--name=${ETCD_NAME} \&#13;
--data-dir=${ETCD_DATA_DIR} \&#13;
--listen-peer-urls=${ETCD_LISTEN_PEER_URLS} \&#13;
--listen-client-urls=${ETCD_LISTEN_CLIENT_URLS},http://127.0.0.1:2379 \&#13;
--advertise-client-urls=${ETCD_ADVERTISE_CLIENT_URLS} \&#13;
--initial-advertise-peer-urls=${ETCD_INITIAL_ADVERTISE_PEER_URLS} \&#13;
--initial-cluster=${ETCD_INITIAL_CLUSTER} \&#13;
--initial-cluster-token=${ETCD_INITIAL_CLUSTER_TOKEN} \&#13;
--initial-cluster-state=new \&#13;
--cert-file=/opt/etcd/ssl/server.pem \&#13;
--key-file=/opt/etcd/ssl/server-key.pem \&#13;
--peer-cert-file=/opt/etcd/ssl/server.pem \&#13;
--peer-key-file=/opt/etcd/ssl/server-key.pem \&#13;
--trusted-ca-file=/opt/etcd/ssl/ca.pem \&#13;
--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem&#13;
Restart=on-failure&#13;
LimitNOFILE=65536&#13;
[Install]&#13;
WantedBy=multi-user.target&#13;
```&#13;
&#13;
1、k8s-master传输证书&#13;
&#13;
```&#13;
cd /root/cert/&#13;
cp ca*pem server*pem /opt/etcd/ssl&#13;
scp ca*pem server*pem k8s-node1:/opt/etcd/ssl&#13;
scp ca*pem server*pem k8s-node2:/opt/etcd/ssl&#13;
```&#13;
&#13;
2、全部设置开机启动&#13;
&#13;
```&#13;
systemctl daemon-reload&#13;
systemctl start etcd&#13;
systemctl enable etcd&#13;
```&#13;
&#13;
3、检查Etcd集群状态&#13;
&#13;
```&#13;
/opt/etcd/bin/etcdctl --ca-file=/opt/etcd/ssl/ca.pem --cert-file=/opt/etcd/ssl/server.pem --key-file=/opt/etcd/ssl/server-key.pem --endpoints='https://192.168.209.143:2379,https://192.168.209.11:2379,https://192.168.209.12:2379' cluster-health&#13;
```&#13;
&#13;
**成功示例：**&#13;
&#13;
```&#13;
member 7bf5e8410987571e is healthy: got healthy result from https://192.168.209.12:2379&#13;
member b9b1e4107f37b0bc is healthy: got healthy result from https://192.168.209.11:2379&#13;
member b9e4274e43b72901 is healthy: got healthy result from https://192.168.209.143:2379&#13;
cluster is healthy&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
#### 部署flannel网络插件&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;部署flannel网络插件&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
&gt; 在node节点部署，如果没有在master部署应用，那就不要在master部署flannel，他是用来给所有 的容器用来通信的。</description><guid isPermaLink="true">https://aglarevv.github.io//post/Kubernetes-k8s.html</guid><pubDate>Tue, 09 Apr 2024 03:04:59 +0000</pubDate></item><item><title>RabbitMQ</title><link>https://aglarevv.github.io//post/RabbitMQ.html</link><description>## 部署&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;单机部署&lt;/summary&gt;&#13;
&#13;
&gt;&#13;
&#13;
1、安装Erlarg&#13;
&#13;
```&#13;
yum -y install erlang -y&#13;
```&#13;
&#13;
2、安装RabbitMQ&#13;
&#13;
```&#13;
yum install -y rabbitmq-server&#13;
```&#13;
&#13;
3、修改配置文件&#13;
&#13;
```&#13;
cp /usr/share/doc/rabbitmq-server-3.3.5/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config&#13;
```&#13;
&#13;
```&#13;
vim /etc/rabbitmq/rabbitmq.config&#13;
&#13;
注释第53行&#13;
{loopback_users, []}&#13;
```&#13;
&#13;
4、安装插件并启动服务&#13;
&#13;
```&#13;
rabbitmq-plugins enable rabbitmq_management&#13;
```&#13;
&#13;
5、重启RabbitMQ服务&#13;
&#13;
```&#13;
systemctl restart rabbitmq-server&#13;
```&#13;
&#13;
6、查看节点状态&#13;
&#13;
```&#13;
rabbitmqctl cluster_status&#13;
```&#13;
&#13;
7、访问测试&#13;
&#13;
```&#13;
ip地址为rabbitMQ所在服务器的地址&#13;
端口号：15672&#13;
默认账号密码：guest/guest&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;集群部署&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、所有节点配置host解析&#13;
&#13;
```&#13;
vim  /etc/hosts&#13;
```&#13;
&#13;
2、所有节点安装erLang和rabbitmq（参照单机部署的1、2、3步）&#13;
3、所有节点cookie内容一致&#13;
&#13;
```&#13;
scp /var/lib/rabbitmq/.erlang.cookie  rabbitmq3:/var/lib/rabbitmq/.erlang.cookie&#13;
&#13;
源码包部署一般会存在.erlang.cookie文件；&#13;
rpm包部署一般是在/var/lib/rabbitmq/.erlang.cookie。</description><guid isPermaLink="true">https://aglarevv.github.io//post/RabbitMQ.html</guid><pubDate>Mon, 08 Apr 2024 03:04:59 +0000</pubDate></item><item><title>Docker</title><link>https://aglarevv.github.io//post/Docker.html</link><description>## Docker部署&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;1、可访问官网方式&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
1、下载yum源&#13;
&#13;
```&#13;
wget https://download.docker.com/linux/centos/docker-ce.repo&#13;
```&#13;
&#13;
2、移动位置并重命名&#13;
&#13;
```&#13;
mv docker-ce.repo /etc/yum.repos.d&#13;
```&#13;
&#13;
3、安装docker&#13;
&#13;
```&#13;
yum install -y docker-ce&#13;
```&#13;
&#13;
4、启动docker&#13;
&#13;
```&#13;
systemctl enable docker &amp;&amp; systemctl start docker&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;2、使用国内镜像源方式&lt;/summary&gt;&#13;
&#13;
&gt; &#13;
&#13;
[配置阿里镜像源](https://developer.aliyun.com/mirror/docker-ce)。</description><guid isPermaLink="true">https://aglarevv.github.io//post/Docker.html</guid><pubDate>Thu, 14 Mar 2024 03:04:59 +0000</pubDate></item></channel></rss>